//
//  KeyMap.swift
//  iina
//
//  Created by lhc on 12/12/2016.
//  Copyright © 2016 lhc. All rights reserved.
//

import Foundation

class KeyMapping {

  static let prettyKeySymbol = [
    "META": "⌘",
    "ENTER": "↩︎",
    "SHIFT": "⇧",
    "ALT": "⌥",
    "CTRL":"⌃",
    "SPACE": "␣",
    "BS": "⌫",
    "DEL": "⌦",
    "TAB": "⇥",
    "ESC": "⎋",
    "UP": "↑",
    "DOWN": "↓",
    "LEFT": "←",
    "RIGHT" : "→",
    "PGUP": "⇞",
    "PGDWN": "⇟",
    "HOME": "↖︎",
    "END": "↘︎",
    "PLAY": "▶︎\u{2006}❙\u{200A}❙",
    "PREV": "◀︎◀︎",
    "NEXT": "▶︎▶︎"
  ]

  var key: String

  var action: [String]

  var rawAction: String

  var comment: String?

  var readableAction: String {
    get {
      return action.joined(separator: " ")
    }
  }

  var prettyKey: String {
    get {
      return key
        .components(separatedBy: "+")
        .map { token -> String in
          let uppercasedToken = token.uppercased()
          if let symbol = KeyMapping.prettyKeySymbol[uppercasedToken] {
            return symbol
          } else if let origToken = KeyCodeHelper.reversedKeyMapForShift[token] {
            return KeyMapping.prettyKeySymbol["SHIFT"]! + origToken.uppercased()
          } else {
            return uppercasedToken
          }
        }.joined(separator: "")
    }
  }

  var prettyCommand: String {
    return KeyBindingTranslator.readableCommand(fromAction: action)
  }

  init(key: String, rawAction: String, comment: String? = nil) {
    self.key = key
    self.rawAction = rawAction
    self.action = rawAction.components(separatedBy: " ")
    self.comment = comment
  }

  static func parseInputConf(_ path: String) -> [KeyMapping]? {
    let reader = StreamReader(path: path)
    var mapping: [KeyMapping] = []
    while var line: String = reader?.nextLine() {      // ignore empty lines
      if line.isEmpty { continue }
      if line.hasPrefix("#@iina") {
        // extended syntax
        continue
      } else if line.hasPrefix("#") {
        // igore comment
        continue
      }
      // remove inline comment
      if let sharpIndex = line.characters.index(of: "#") {
        line = line.substring(to: sharpIndex)
      }
      // split
      let splitted = line.characters.split(separator: " ", maxSplits: 1)
      if splitted.count < 2 {
        return nil
      }
      let key = String(splitted[0])
      let action = String(splitted[1])

      mapping.append(KeyMapping(key: key, rawAction: action, comment: nil))
    }
    return mapping
  }

  static func generateConfData(from mappings: [KeyMapping]) -> String {
    var result = "# Generated by IINA\n\n"
    mappings.forEach { km in
      result += "\(km.key) \(km.readableAction)\n"
    }
    return result
  }
}
